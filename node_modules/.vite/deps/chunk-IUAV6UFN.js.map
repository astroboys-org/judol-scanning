{
  "version": 3,
  "sources": ["../../yargs-parser/build/lib/index.js", "../../yargs-parser/build/lib/string-utils.js", "../../yargs-parser/build/lib/tokenize-arg-string.js", "../../yargs-parser/build/lib/yargs-parser-types.js", "../../yargs-parser/build/lib/yargs-parser.js", "../../yargs/build/lib/utils/process-argv.js", "../../yargs/lib/platform-shims/esm.mjs", "../../cliui/build/lib/index.js", "../../cliui/build/lib/string-utils.js", "../../cliui/index.mjs", "../../escalade/sync/index.mjs", "../../yargs/build/lib/yerror.js", "../../y18n/build/lib/platform-shims/node.js", "../../y18n/build/lib/index.js", "../../y18n/index.mjs", "../../yargs/build/lib/utils/apply-extends.js"],
  "sourcesContent": ["/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nvar _a, _b, _c;\nimport { format } from 'util';\nimport { normalize, resolve } from 'path';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nimport { YargsParser } from './yargs-parser.js';\nimport { readFileSync } from 'fs';\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\nif (nodeVersion) {\n    const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\n// Creates a yargs-parser instance using Node.js standard libraries:\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n    cwd: process.cwd,\n    env: () => {\n        return env;\n    },\n    format,\n    normalize,\n    resolve,\n    // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n    // we can exercise all the lines below:\n    require: (path) => {\n        if (typeof require !== 'undefined') {\n            return require(path);\n        }\n        else if (path.match(/\\.json$/)) {\n            // Addresses: https://github.com/yargs/yargs/issues/2040\n            return JSON.parse(readFileSync(path, 'utf8'));\n        }\n        else {\n            throw Error('only .json config files are supported in ESM');\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nexport default yargsParser;\n", "/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nexport function camelCase(str) {\n    // Handle the case where an argument is provided as camel case, e.g., fooBar.\n    // by ensuring that the string isn't already mixed case:\n    const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n    if (!isCamelCase) {\n        str = str.toLowerCase();\n    }\n    if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n        return str;\n    }\n    else {\n        let camelcase = '';\n        let nextChrUpper = false;\n        const leadingHyphens = str.match(/^-+/);\n        for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n            let chr = str.charAt(i);\n            if (nextChrUpper) {\n                nextChrUpper = false;\n                chr = chr.toUpperCase();\n            }\n            if (i !== 0 && (chr === '-' || chr === '_')) {\n                nextChrUpper = true;\n            }\n            else if (chr !== '-' && chr !== '_') {\n                camelcase += chr;\n            }\n        }\n        return camelcase;\n    }\n}\nexport function decamelize(str, joinString) {\n    const lowercase = str.toLowerCase();\n    joinString = joinString || '-';\n    let notCamelcase = '';\n    for (let i = 0; i < str.length; i++) {\n        const chrLower = lowercase.charAt(i);\n        const chrString = str.charAt(i);\n        if (chrLower !== chrString && i > 0) {\n            notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n        }\n        else {\n            notCamelcase += chrString;\n        }\n    }\n    return notCamelcase;\n}\nexport function looksLikeNumber(x) {\n    if (x === null || x === undefined)\n        return false;\n    // if loaded from config, may already be a number.\n    if (typeof x === 'number')\n        return true;\n    // hexadecimal.\n    if (/^0x[0-9a-f]+$/i.test(x))\n        return true;\n    // don't treat 0123 as a number; as it drops the leading '0'.\n    if (/^0[^.]/.test(x))\n        return false;\n    return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n", "/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\n// take an un-split argv string and tokenize it.\nexport function tokenizeArgString(argString) {\n    if (Array.isArray(argString)) {\n        return argString.map(e => typeof e !== 'string' ? e + '' : e);\n    }\n    argString = argString.trim();\n    let i = 0;\n    let prevC = null;\n    let c = null;\n    let opening = null;\n    const args = [];\n    for (let ii = 0; ii < argString.length; ii++) {\n        prevC = c;\n        c = argString.charAt(ii);\n        // split on spaces unless we're in quotes.\n        if (c === ' ' && !opening) {\n            if (!(prevC === ' ')) {\n                i++;\n            }\n            continue;\n        }\n        // don't split the string if we're in matching\n        // opening or closing single and double quotes.\n        if (c === opening) {\n            opening = null;\n        }\n        else if ((c === \"'\" || c === '\"') && !opening) {\n            opening = c;\n        }\n        if (!args[i])\n            args[i] = '';\n        args[i] += c;\n    }\n    return args;\n}\n", "/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nexport var DefaultValuesForTypeKey;\n(function (DefaultValuesForTypeKey) {\n    DefaultValuesForTypeKey[\"BOOLEAN\"] = \"boolean\";\n    DefaultValuesForTypeKey[\"STRING\"] = \"string\";\n    DefaultValuesForTypeKey[\"NUMBER\"] = \"number\";\n    DefaultValuesForTypeKey[\"ARRAY\"] = \"array\";\n})(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));\n", "/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nimport { tokenizeArgString } from './tokenize-arg-string.js';\nimport { DefaultValuesForTypeKey } from './yargs-parser-types.js';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nlet mixin;\nexport class YargsParser {\n    constructor(_mixin) {\n        mixin = _mixin;\n    }\n    parse(argsInput, options) {\n        const opts = Object.assign({\n            alias: undefined,\n            array: undefined,\n            boolean: undefined,\n            config: undefined,\n            configObjects: undefined,\n            configuration: undefined,\n            coerce: undefined,\n            count: undefined,\n            default: undefined,\n            envPrefix: undefined,\n            narg: undefined,\n            normalize: undefined,\n            string: undefined,\n            number: undefined,\n            __: undefined,\n            key: undefined\n        }, options);\n        // allow a string argument to be passed in rather\n        // than an argv array.\n        const args = tokenizeArgString(argsInput);\n        // tokenizeArgString adds extra quotes to args if argsInput is a string\n        // only strip those extra quotes in processValue if argsInput is a string\n        const inputIsString = typeof argsInput === 'string';\n        // aliases might have transitive relationships, normalize this.\n        const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\n        const configuration = Object.assign({\n            'boolean-negation': true,\n            'camel-case-expansion': true,\n            'combine-arrays': false,\n            'dot-notation': true,\n            'duplicate-arguments-array': true,\n            'flatten-duplicate-arrays': true,\n            'greedy-arrays': true,\n            'halt-at-non-option': false,\n            'nargs-eats-options': false,\n            'negation-prefix': 'no-',\n            'parse-numbers': true,\n            'parse-positional-numbers': true,\n            'populate--': false,\n            'set-placeholder-key': false,\n            'short-option-groups': true,\n            'strip-aliased': false,\n            'strip-dashed': false,\n            'unknown-options-as-args': false\n        }, opts.configuration);\n        const defaults = Object.assign(Object.create(null), opts.default);\n        const configObjects = opts.configObjects || [];\n        const envPrefix = opts.envPrefix;\n        const notFlagsOption = configuration['populate--'];\n        const notFlagsArgv = notFlagsOption ? '--' : '_';\n        const newAliases = Object.create(null);\n        const defaulted = Object.create(null);\n        // allow a i18n handler to be passed in, default to a fake one (util.format).\n        const __ = opts.__ || mixin.format;\n        const flags = {\n            aliases: Object.create(null),\n            arrays: Object.create(null),\n            bools: Object.create(null),\n            strings: Object.create(null),\n            numbers: Object.create(null),\n            counts: Object.create(null),\n            normalize: Object.create(null),\n            configs: Object.create(null),\n            nargs: Object.create(null),\n            coercions: Object.create(null),\n            keys: []\n        };\n        const negative = /^-([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$/;\n        const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');\n        [].concat(opts.array || []).filter(Boolean).forEach(function (opt) {\n            const key = typeof opt === 'object' ? opt.key : opt;\n            // assign to flags[bools|strings|numbers]\n            const assignment = Object.keys(opt).map(function (key) {\n                const arrayFlagKeys = {\n                    boolean: 'bools',\n                    string: 'strings',\n                    number: 'numbers'\n                };\n                return arrayFlagKeys[key];\n            }).filter(Boolean).pop();\n            // assign key to be coerced\n            if (assignment) {\n                flags[assignment][key] = true;\n            }\n            flags.arrays[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.boolean || []).filter(Boolean).forEach(function (key) {\n            flags.bools[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.string || []).filter(Boolean).forEach(function (key) {\n            flags.strings[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.number || []).filter(Boolean).forEach(function (key) {\n            flags.numbers[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.count || []).filter(Boolean).forEach(function (key) {\n            flags.counts[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.normalize || []).filter(Boolean).forEach(function (key) {\n            flags.normalize[key] = true;\n            flags.keys.push(key);\n        });\n        if (typeof opts.narg === 'object') {\n            Object.entries(opts.narg).forEach(([key, value]) => {\n                if (typeof value === 'number') {\n                    flags.nargs[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.coerce === 'object') {\n            Object.entries(opts.coerce).forEach(([key, value]) => {\n                if (typeof value === 'function') {\n                    flags.coercions[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.config !== 'undefined') {\n            if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n                ;\n                [].concat(opts.config).filter(Boolean).forEach(function (key) {\n                    flags.configs[key] = true;\n                });\n            }\n            else if (typeof opts.config === 'object') {\n                Object.entries(opts.config).forEach(([key, value]) => {\n                    if (typeof value === 'boolean' || typeof value === 'function') {\n                        flags.configs[key] = value;\n                    }\n                });\n            }\n        }\n        // create a lookup table that takes into account all\n        // combinations of aliases: {f: ['foo'], foo: ['f']}\n        extendAliases(opts.key, aliases, opts.default, flags.arrays);\n        // apply default values to all aliases.\n        Object.keys(defaults).forEach(function (key) {\n            (flags.aliases[key] || []).forEach(function (alias) {\n                defaults[alias] = defaults[key];\n            });\n        });\n        let error = null;\n        checkConfiguration();\n        let notFlags = [];\n        const argv = Object.assign(Object.create(null), { _: [] });\n        // TODO(bcoe): for the first pass at removing object prototype  we didn't\n        // remove all prototypes from objects returned by this API, we might want\n        // to gradually move towards doing so.\n        const argvReturn = {};\n        for (let i = 0; i < args.length; i++) {\n            const arg = args[i];\n            const truncatedArg = arg.replace(/^-{3,}/, '---');\n            let broken;\n            let key;\n            let letters;\n            let m;\n            let next;\n            let value;\n            // any unknown option (except for end-of-options, \"--\")\n            if (arg !== '--' && /^-/.test(arg) && isUnknownOptionAsArg(arg)) {\n                pushPositional(arg);\n                // ---, ---=, ----, etc,\n            }\n            else if (truncatedArg.match(/^---+(=|$)/)) {\n                // options without key name are invalid.\n                pushPositional(arg);\n                continue;\n                // -- separated by =\n            }\n            else if (arg.match(/^--.+=/) || (!configuration['short-option-groups'] && arg.match(/^-.+=/))) {\n                // Using [\\s\\S] instead of . because js doesn't support the\n                // 'dotall' regex modifier. See:\n                // http://stackoverflow.com/a/1068308/13216\n                m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/);\n                // arrays format = '--f=a b c'\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    if (checkAllAliases(m[1], flags.arrays)) {\n                        i = eatArray(i, m[1], args, m[2]);\n                    }\n                    else if (checkAllAliases(m[1], flags.nargs) !== false) {\n                        // nargs format = '--f=monkey washing cat'\n                        i = eatNargs(i, m[1], args, m[2]);\n                    }\n                    else {\n                        setArg(m[1], m[2], true);\n                    }\n                }\n            }\n            else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\n                m = arg.match(negatedBoolean);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);\n                }\n                // -- separated by space.\n            }\n            else if (arg.match(/^--.+/) || (!configuration['short-option-groups'] && arg.match(/^-[^-]+/))) {\n                m = arg.match(/^--?(.+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (checkAllAliases(key, flags.arrays)) {\n                        // array format = '--foo a b c'\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        // nargs format = '--foo a b c'\n                        // should be truthy even if: flags.nargs[key] === 0\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!next.match(/^-/) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n                // dot-notation flag separated by '='.\n            }\n            else if (arg.match(/^-.\\..+=/)) {\n                m = arg.match(/^-([^=]+)=([\\s\\S]*)$/);\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    setArg(m[1], m[2]);\n                }\n                // dot-notation flag separated by space.\n            }\n            else if (arg.match(/^-.\\..+/) && !arg.match(negative)) {\n                next = args[i + 1];\n                m = arg.match(/^-(.\\..+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (next !== undefined && !next.match(/^-/) &&\n                        !checkAllAliases(key, flags.bools) &&\n                        !checkAllAliases(key, flags.counts)) {\n                        setArg(key, next);\n                        i++;\n                    }\n                    else {\n                        setArg(key, defaultValue(key));\n                    }\n                }\n            }\n            else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n                letters = arg.slice(1, -1).split('');\n                broken = false;\n                for (let j = 0; j < letters.length; j++) {\n                    next = arg.slice(j + 2);\n                    if (letters[j + 1] && letters[j + 1] === '=') {\n                        value = arg.slice(j + 3);\n                        key = letters[j];\n                        if (checkAllAliases(key, flags.arrays)) {\n                            // array format = '-f=a b c'\n                            i = eatArray(i, key, args, value);\n                        }\n                        else if (checkAllAliases(key, flags.nargs) !== false) {\n                            // nargs format = '-f=monkey washing cat'\n                            i = eatNargs(i, key, args, value);\n                        }\n                        else {\n                            setArg(key, value);\n                        }\n                        broken = true;\n                        break;\n                    }\n                    if (next === '-') {\n                        setArg(letters[j], next);\n                        continue;\n                    }\n                    // current letter is an alphabetic character and next value is a number\n                    if (/[A-Za-z]/.test(letters[j]) &&\n                        /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) &&\n                        checkAllAliases(next, flags.bools) === false) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    else {\n                        setArg(letters[j], defaultValue(letters[j]));\n                    }\n                }\n                key = arg.slice(-1)[0];\n                if (!broken && key !== '-') {\n                    if (checkAllAliases(key, flags.arrays)) {\n                        // array format = '-f a b c'\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        // nargs format = '-f a b c'\n                        // should be truthy even if: flags.nargs[key] === 0\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!/^(-|--)[^-]/.test(next) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n            }\n            else if (arg.match(/^-[0-9]$/) &&\n                arg.match(negative) &&\n                checkAllAliases(arg.slice(1), flags.bools)) {\n                // single-digit boolean alias, e.g: xargs -0\n                key = arg.slice(1);\n                setArg(key, defaultValue(key));\n            }\n            else if (arg === '--') {\n                notFlags = args.slice(i + 1);\n                break;\n            }\n            else if (configuration['halt-at-non-option']) {\n                notFlags = args.slice(i);\n                break;\n            }\n            else {\n                pushPositional(arg);\n            }\n        }\n        // order of precedence:\n        // 1. command line arg\n        // 2. value from env var\n        // 3. value from config file\n        // 4. value from config objects\n        // 5. configured default value\n        applyEnvVars(argv, true); // special case: check env vars that point to config file\n        applyEnvVars(argv, false);\n        setConfig(argv);\n        setConfigObjects();\n        applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\n        applyCoercions(argv);\n        if (configuration['set-placeholder-key'])\n            setPlaceholderKeys(argv);\n        // for any counts either not in args or without an explicit default, set to 0\n        Object.keys(flags.counts).forEach(function (key) {\n            if (!hasKey(argv, key.split('.')))\n                setArg(key, 0);\n        });\n        // '--' defaults to undefined.\n        if (notFlagsOption && notFlags.length)\n            argv[notFlagsArgv] = [];\n        notFlags.forEach(function (key) {\n            argv[notFlagsArgv].push(key);\n        });\n        if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\n            Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\n                delete argv[key];\n            });\n        }\n        if (configuration['strip-aliased']) {\n            ;\n            [].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\n                if (configuration['camel-case-expansion'] && alias.includes('-')) {\n                    delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')];\n                }\n                delete argv[alias];\n            });\n        }\n        // Push argument into positional array, applying numeric coercion:\n        function pushPositional(arg) {\n            const maybeCoercedNumber = maybeCoerceNumber('_', arg);\n            if (typeof maybeCoercedNumber === 'string' || typeof maybeCoercedNumber === 'number') {\n                argv._.push(maybeCoercedNumber);\n            }\n        }\n        // how many arguments should we consume, based\n        // on the nargs option?\n        function eatNargs(i, key, args, argAfterEqualSign) {\n            let ii;\n            let toEat = checkAllAliases(key, flags.nargs);\n            // NaN has a special meaning for the array type, indicating that one or\n            // more values are expected.\n            toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat;\n            if (toEat === 0) {\n                if (!isUndefined(argAfterEqualSign)) {\n                    error = Error(__('Argument unexpected for: %s', key));\n                }\n                setArg(key, defaultValue(key));\n                return i;\n            }\n            let available = isUndefined(argAfterEqualSign) ? 0 : 1;\n            if (configuration['nargs-eats-options']) {\n                // classic behavior, yargs eats positional and dash arguments.\n                if (args.length - (i + 1) + available < toEat) {\n                    error = Error(__('Not enough arguments following: %s', key));\n                }\n                available = toEat;\n            }\n            else {\n                // nargs will not consume flag arguments, e.g., -abc, --foo,\n                // and terminates when one is observed.\n                for (ii = i + 1; ii < args.length; ii++) {\n                    if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii]))\n                        available++;\n                    else\n                        break;\n                }\n                if (available < toEat)\n                    error = Error(__('Not enough arguments following: %s', key));\n            }\n            let consumed = Math.min(available, toEat);\n            if (!isUndefined(argAfterEqualSign) && consumed > 0) {\n                setArg(key, argAfterEqualSign);\n                consumed--;\n            }\n            for (ii = i + 1; ii < (consumed + i + 1); ii++) {\n                setArg(key, args[ii]);\n            }\n            return (i + consumed);\n        }\n        // if an option is an array, eat all non-hyphenated arguments\n        // following it... YUM!\n        // e.g., --foo apple banana cat becomes [\"apple\", \"banana\", \"cat\"]\n        function eatArray(i, key, args, argAfterEqualSign) {\n            let argsToSet = [];\n            let next = argAfterEqualSign || args[i + 1];\n            // If both array and nargs are configured, enforce the nargs count:\n            const nargsCount = checkAllAliases(key, flags.nargs);\n            if (checkAllAliases(key, flags.bools) && !(/^(true|false)$/.test(next))) {\n                argsToSet.push(true);\n            }\n            else if (isUndefined(next) ||\n                (isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))) {\n                // for keys without value ==> argsToSet remains an empty []\n                // set user default value, if available\n                if (defaults[key] !== undefined) {\n                    const defVal = defaults[key];\n                    argsToSet = Array.isArray(defVal) ? defVal : [defVal];\n                }\n            }\n            else {\n                // value in --option=value is eaten as is\n                if (!isUndefined(argAfterEqualSign)) {\n                    argsToSet.push(processValue(key, argAfterEqualSign, true));\n                }\n                for (let ii = i + 1; ii < args.length; ii++) {\n                    if ((!configuration['greedy-arrays'] && argsToSet.length > 0) ||\n                        (nargsCount && typeof nargsCount === 'number' && argsToSet.length >= nargsCount))\n                        break;\n                    next = args[ii];\n                    if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))\n                        break;\n                    i = ii;\n                    argsToSet.push(processValue(key, next, inputIsString));\n                }\n            }\n            // If both array and nargs are configured, create an error if less than\n            // nargs positionals were found. NaN has special meaning, indicating\n            // that at least one value is required (more are okay).\n            if (typeof nargsCount === 'number' && ((nargsCount && argsToSet.length < nargsCount) ||\n                (isNaN(nargsCount) && argsToSet.length === 0))) {\n                error = Error(__('Not enough arguments following: %s', key));\n            }\n            setArg(key, argsToSet);\n            return i;\n        }\n        function setArg(key, val, shouldStripQuotes = inputIsString) {\n            if (/-/.test(key) && configuration['camel-case-expansion']) {\n                const alias = key.split('.').map(function (prop) {\n                    return camelCase(prop);\n                }).join('.');\n                addNewAlias(key, alias);\n            }\n            const value = processValue(key, val, shouldStripQuotes);\n            const splitKey = key.split('.');\n            setKey(argv, splitKey, value);\n            // handle populating aliases of the full key\n            if (flags.aliases[key]) {\n                flags.aliases[key].forEach(function (x) {\n                    const keyProperties = x.split('.');\n                    setKey(argv, keyProperties, value);\n                });\n            }\n            // handle populating aliases of the first element of the dot-notation key\n            if (splitKey.length > 1 && configuration['dot-notation']) {\n                ;\n                (flags.aliases[splitKey[0]] || []).forEach(function (x) {\n                    let keyProperties = x.split('.');\n                    // expand alias with nested objects in key\n                    const a = [].concat(splitKey);\n                    a.shift(); // nuke the old key.\n                    keyProperties = keyProperties.concat(a);\n                    // populate alias only if is not already an alias of the full key\n                    // (already populated above)\n                    if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {\n                        setKey(argv, keyProperties, value);\n                    }\n                });\n            }\n            // Set normalize getter and setter when key is in 'normalize' but isn't an array\n            if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n                const keys = [key].concat(flags.aliases[key] || []);\n                keys.forEach(function (key) {\n                    Object.defineProperty(argvReturn, key, {\n                        enumerable: true,\n                        get() {\n                            return val;\n                        },\n                        set(value) {\n                            val = typeof value === 'string' ? mixin.normalize(value) : value;\n                        }\n                    });\n                });\n            }\n        }\n        function addNewAlias(key, alias) {\n            if (!(flags.aliases[key] && flags.aliases[key].length)) {\n                flags.aliases[key] = [alias];\n                newAliases[alias] = true;\n            }\n            if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n                addNewAlias(alias, key);\n            }\n        }\n        function processValue(key, val, shouldStripQuotes) {\n            // strings may be quoted, clean this up as we assign values.\n            if (shouldStripQuotes) {\n                val = stripQuotes(val);\n            }\n            // handle parsing boolean arguments --foo=true --bar false.\n            if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n                if (typeof val === 'string')\n                    val = val === 'true';\n            }\n            let value = Array.isArray(val)\n                ? val.map(function (v) { return maybeCoerceNumber(key, v); })\n                : maybeCoerceNumber(key, val);\n            // increment a count given as arg (either no value or value parsed as boolean)\n            if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n                value = increment();\n            }\n            // Set normalized value when key is in 'normalize' and in 'arrays'\n            if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n                if (Array.isArray(val))\n                    value = val.map((val) => { return mixin.normalize(val); });\n                else\n                    value = mixin.normalize(val);\n            }\n            return value;\n        }\n        function maybeCoerceNumber(key, value) {\n            if (!configuration['parse-positional-numbers'] && key === '_')\n                return value;\n            if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n                const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && (Number.isSafeInteger(Math.floor(parseFloat(`${value}`))));\n                if (shouldCoerceNumber || (!isUndefined(value) && checkAllAliases(key, flags.numbers))) {\n                    value = Number(value);\n                }\n            }\n            return value;\n        }\n        // set args from config.json file, this should be\n        // applied last so that defaults can be applied.\n        function setConfig(argv) {\n            const configLookup = Object.create(null);\n            // expand defaults/aliases, in-case any happen to reference\n            // the config.json file.\n            applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\n            Object.keys(flags.configs).forEach(function (configKey) {\n                const configPath = argv[configKey] || configLookup[configKey];\n                if (configPath) {\n                    try {\n                        let config = null;\n                        const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\n                        const resolveConfig = flags.configs[configKey];\n                        if (typeof resolveConfig === 'function') {\n                            try {\n                                config = resolveConfig(resolvedConfigPath);\n                            }\n                            catch (e) {\n                                config = e;\n                            }\n                            if (config instanceof Error) {\n                                error = config;\n                                return;\n                            }\n                        }\n                        else {\n                            config = mixin.require(resolvedConfigPath);\n                        }\n                        setConfigObject(config);\n                    }\n                    catch (ex) {\n                        // Deno will receive a PermissionDenied error if an attempt is\n                        // made to load config without the --allow-read flag:\n                        if (ex.name === 'PermissionDenied')\n                            error = ex;\n                        else if (argv[configKey])\n                            error = Error(__('Invalid JSON config file: %s', configPath));\n                    }\n                }\n            });\n        }\n        // set args from config object.\n        // it recursively checks nested objects.\n        function setConfigObject(config, prev) {\n            Object.keys(config).forEach(function (key) {\n                const value = config[key];\n                const fullKey = prev ? prev + '.' + key : key;\n                // if the value is an inner object and we have dot-notation\n                // enabled, treat inner objects in config the same as\n                // heavily nested dot notations (foo.bar.apple).\n                if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\n                    // if the value is an object but not an array, check nested object\n                    setConfigObject(value, fullKey);\n                }\n                else {\n                    // setting arguments via CLI takes precedence over\n                    // values within the config file.\n                    if (!hasKey(argv, fullKey.split('.')) || (checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays'])) {\n                        setArg(fullKey, value);\n                    }\n                }\n            });\n        }\n        // set all config objects passed in opts\n        function setConfigObjects() {\n            if (typeof configObjects !== 'undefined') {\n                configObjects.forEach(function (configObject) {\n                    setConfigObject(configObject);\n                });\n            }\n        }\n        function applyEnvVars(argv, configOnly) {\n            if (typeof envPrefix === 'undefined')\n                return;\n            const prefix = typeof envPrefix === 'string' ? envPrefix : '';\n            const env = mixin.env();\n            Object.keys(env).forEach(function (envVar) {\n                if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n                    // get array of nested keys and convert them to camel case\n                    const keys = envVar.split('__').map(function (key, i) {\n                        if (i === 0) {\n                            key = key.substring(prefix.length);\n                        }\n                        return camelCase(key);\n                    });\n                    if (((configOnly && flags.configs[keys.join('.')]) || !configOnly) && !hasKey(argv, keys)) {\n                        setArg(keys.join('.'), env[envVar]);\n                    }\n                }\n            });\n        }\n        function applyCoercions(argv) {\n            let coerce;\n            const applied = new Set();\n            Object.keys(argv).forEach(function (key) {\n                if (!applied.has(key)) { // If we haven't already coerced this option via one of its aliases\n                    coerce = checkAllAliases(key, flags.coercions);\n                    if (typeof coerce === 'function') {\n                        try {\n                            const value = maybeCoerceNumber(key, coerce(argv[key]));\n                            ([].concat(flags.aliases[key] || [], key)).forEach(ali => {\n                                applied.add(ali);\n                                argv[ali] = value;\n                            });\n                        }\n                        catch (err) {\n                            error = err;\n                        }\n                    }\n                }\n            });\n        }\n        function setPlaceholderKeys(argv) {\n            flags.keys.forEach((key) => {\n                // don't set placeholder keys for dot notation options 'foo.bar'.\n                if (~key.indexOf('.'))\n                    return;\n                if (typeof argv[key] === 'undefined')\n                    argv[key] = undefined;\n            });\n            return argv;\n        }\n        function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {\n            Object.keys(defaults).forEach(function (key) {\n                if (!hasKey(obj, key.split('.'))) {\n                    setKey(obj, key.split('.'), defaults[key]);\n                    if (canLog)\n                        defaulted[key] = true;\n                    (aliases[key] || []).forEach(function (x) {\n                        if (hasKey(obj, x.split('.')))\n                            return;\n                        setKey(obj, x.split('.'), defaults[key]);\n                    });\n                }\n            });\n        }\n        function hasKey(obj, keys) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                o = (o[key] || {});\n            });\n            const key = keys[keys.length - 1];\n            if (typeof o !== 'object')\n                return false;\n            else\n                return key in o;\n        }\n        function setKey(obj, keys, value) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                // TODO(bcoe): in the next major version of yargs, switch to\n                // Object.create(null) for dot notation:\n                key = sanitizeKey(key);\n                if (typeof o === 'object' && o[key] === undefined) {\n                    o[key] = {};\n                }\n                if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\n                    // ensure that o[key] is an array, and that the last item is an empty object.\n                    if (Array.isArray(o[key])) {\n                        o[key].push({});\n                    }\n                    else {\n                        o[key] = [o[key], {}];\n                    }\n                    // we want to update the empty object at the end of the o[key] array, so set o to that object\n                    o = o[key][o[key].length - 1];\n                }\n                else {\n                    o = o[key];\n                }\n            });\n            // TODO(bcoe): in the next major version of yargs, switch to\n            // Object.create(null) for dot notation:\n            const key = sanitizeKey(keys[keys.length - 1]);\n            const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);\n            const isValueArray = Array.isArray(value);\n            let duplicate = configuration['duplicate-arguments-array'];\n            // nargs has higher priority than duplicate\n            if (!duplicate && checkAllAliases(key, flags.nargs)) {\n                duplicate = true;\n                if ((!isUndefined(o[key]) && flags.nargs[key] === 1) || (Array.isArray(o[key]) && o[key].length === flags.nargs[key])) {\n                    o[key] = undefined;\n                }\n            }\n            if (value === increment()) {\n                o[key] = increment(o[key]);\n            }\n            else if (Array.isArray(o[key])) {\n                if (duplicate && isTypeArray && isValueArray) {\n                    o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);\n                }\n                else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n                    o[key] = value;\n                }\n                else {\n                    o[key] = o[key].concat([value]);\n                }\n            }\n            else if (o[key] === undefined && isTypeArray) {\n                o[key] = isValueArray ? value : [value];\n            }\n            else if (duplicate && !(o[key] === undefined ||\n                checkAllAliases(key, flags.counts) ||\n                checkAllAliases(key, flags.bools))) {\n                o[key] = [o[key], value];\n            }\n            else {\n                o[key] = value;\n            }\n        }\n        // extend the aliases list with inferred aliases.\n        function extendAliases(...args) {\n            args.forEach(function (obj) {\n                Object.keys(obj || {}).forEach(function (key) {\n                    // short-circuit if we've already added a key\n                    // to the aliases array, for example it might\n                    // exist in both 'opts.default' and 'opts.key'.\n                    if (flags.aliases[key])\n                        return;\n                    flags.aliases[key] = [].concat(aliases[key] || []);\n                    // For \"--option-name\", also set argv.optionName\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (/-/.test(x) && configuration['camel-case-expansion']) {\n                            const c = camelCase(x);\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    // For \"--optionName\", also set argv['option-name']\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\n                            const c = decamelize(x, '-');\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    flags.aliases[key].forEach(function (x) {\n                        flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n                            return x !== y;\n                        }));\n                    });\n                });\n            });\n        }\n        function checkAllAliases(key, flag) {\n            const toCheck = [].concat(flags.aliases[key] || [], key);\n            const keys = Object.keys(flag);\n            const setAlias = toCheck.find(key => keys.includes(key));\n            return setAlias ? flag[setAlias] : false;\n        }\n        function hasAnyFlag(key) {\n            const flagsKeys = Object.keys(flags);\n            const toCheck = [].concat(flagsKeys.map(k => flags[k]));\n            return toCheck.some(function (flag) {\n                return Array.isArray(flag) ? flag.includes(key) : flag[key];\n            });\n        }\n        function hasFlagsMatching(arg, ...patterns) {\n            const toCheck = [].concat(...patterns);\n            return toCheck.some(function (pattern) {\n                const match = arg.match(pattern);\n                return match && hasAnyFlag(match[1]);\n            });\n        }\n        // based on a simplified version of the short flag group parsing logic\n        function hasAllShortFlags(arg) {\n            // if this is a negative number, or doesn't start with a single hyphen, it's not a short flag group\n            if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\n                return false;\n            }\n            let hasAllFlags = true;\n            let next;\n            const letters = arg.slice(1).split('');\n            for (let j = 0; j < letters.length; j++) {\n                next = arg.slice(j + 2);\n                if (!hasAnyFlag(letters[j])) {\n                    hasAllFlags = false;\n                    break;\n                }\n                if ((letters[j + 1] && letters[j + 1] === '=') ||\n                    next === '-' ||\n                    (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) ||\n                    (letters[j + 1] && letters[j + 1].match(/\\W/))) {\n                    break;\n                }\n            }\n            return hasAllFlags;\n        }\n        function isUnknownOptionAsArg(arg) {\n            return configuration['unknown-options-as-args'] && isUnknownOption(arg);\n        }\n        function isUnknownOption(arg) {\n            arg = arg.replace(/^-{3,}/, '--');\n            // ignore negative numbers\n            if (arg.match(negative)) {\n                return false;\n            }\n            // if this is a short option group and all of them are configured, it isn't unknown\n            if (hasAllShortFlags(arg)) {\n                return false;\n            }\n            // e.g. '--count=2'\n            const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/;\n            // e.g. '-a' or '--arg'\n            const normalFlag = /^-+([^=]+?)$/;\n            // e.g. '-a-'\n            const flagEndingInHyphen = /^-+([^=]+?)-$/;\n            // e.g. '-abc123'\n            const flagEndingInDigits = /^-+([^=]+?\\d+)$/;\n            // e.g. '-a/usr/local'\n            const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/;\n            // check the different types of flag styles, including negatedBoolean, a pattern defined near the start of the parse method\n            return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\n        }\n        // make a best effort to pick a default value\n        // for an option based on name and type.\n        function defaultValue(key) {\n            if (!checkAllAliases(key, flags.bools) &&\n                !checkAllAliases(key, flags.counts) &&\n                `${key}` in defaults) {\n                return defaults[key];\n            }\n            else {\n                return defaultForType(guessType(key));\n            }\n        }\n        // return a default value, given the type of a flag.,\n        function defaultForType(type) {\n            const def = {\n                [DefaultValuesForTypeKey.BOOLEAN]: true,\n                [DefaultValuesForTypeKey.STRING]: '',\n                [DefaultValuesForTypeKey.NUMBER]: undefined,\n                [DefaultValuesForTypeKey.ARRAY]: []\n            };\n            return def[type];\n        }\n        // given a flag, enforce a default type.\n        function guessType(key) {\n            let type = DefaultValuesForTypeKey.BOOLEAN;\n            if (checkAllAliases(key, flags.strings))\n                type = DefaultValuesForTypeKey.STRING;\n            else if (checkAllAliases(key, flags.numbers))\n                type = DefaultValuesForTypeKey.NUMBER;\n            else if (checkAllAliases(key, flags.bools))\n                type = DefaultValuesForTypeKey.BOOLEAN;\n            else if (checkAllAliases(key, flags.arrays))\n                type = DefaultValuesForTypeKey.ARRAY;\n            return type;\n        }\n        function isUndefined(num) {\n            return num === undefined;\n        }\n        // check user configuration settings for inconsistencies\n        function checkConfiguration() {\n            // count keys should not be set as array/narg\n            Object.keys(flags.counts).find(key => {\n                if (checkAllAliases(key, flags.arrays)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));\n                    return true;\n                }\n                else if (checkAllAliases(key, flags.nargs)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));\n                    return true;\n                }\n                return false;\n            });\n        }\n        return {\n            aliases: Object.assign({}, flags.aliases),\n            argv: Object.assign(argvReturn, argv),\n            configuration: configuration,\n            defaulted: Object.assign({}, defaulted),\n            error: error,\n            newAliases: Object.assign({}, newAliases)\n        };\n    }\n}\n// if any aliases reference each other, we should\n// merge them together.\nfunction combineAliases(aliases) {\n    const aliasArrays = [];\n    const combined = Object.create(null);\n    let change = true;\n    // turn alias lookup hash {key: ['alias1', 'alias2']} into\n    // a simple array ['key', 'alias1', 'alias2']\n    Object.keys(aliases).forEach(function (key) {\n        aliasArrays.push([].concat(aliases[key], key));\n    });\n    // combine arrays until zero changes are\n    // made in an iteration.\n    while (change) {\n        change = false;\n        for (let i = 0; i < aliasArrays.length; i++) {\n            for (let ii = i + 1; ii < aliasArrays.length; ii++) {\n                const intersect = aliasArrays[i].filter(function (v) {\n                    return aliasArrays[ii].indexOf(v) !== -1;\n                });\n                if (intersect.length) {\n                    aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\n                    aliasArrays.splice(ii, 1);\n                    change = true;\n                    break;\n                }\n            }\n        }\n    }\n    // map arrays back to the hash-lookup (de-dupe while\n    // we're at it).\n    aliasArrays.forEach(function (aliasArray) {\n        aliasArray = aliasArray.filter(function (v, i, self) {\n            return self.indexOf(v) === i;\n        });\n        const lastAlias = aliasArray.pop();\n        if (lastAlias !== undefined && typeof lastAlias === 'string') {\n            combined[lastAlias] = aliasArray;\n        }\n    });\n    return combined;\n}\n// this function should only be called when a count is given as an arg\n// it is NOT called to set a default value\n// thus we can start the count at 1 instead of 0\nfunction increment(orig) {\n    return orig !== undefined ? orig + 1 : 1;\n}\n// TODO(bcoe): in the next major version of yargs, switch to\n// Object.create(null) for dot notation:\nfunction sanitizeKey(key) {\n    if (key === '__proto__')\n        return '___proto___';\n    return key;\n}\nfunction stripQuotes(val) {\n    return (typeof val === 'string' &&\n        (val[0] === \"'\" || val[0] === '\"') &&\n        val[val.length - 1] === val[0])\n        ? val.substring(1, val.length - 1)\n        : val;\n}\n", "function getProcessArgvBinIndex() {\n    if (isBundledElectronApp())\n        return 0;\n    return 1;\n}\nfunction isBundledElectronApp() {\n    return isElectronApp() && !process.defaultApp;\n}\nfunction isElectronApp() {\n    return !!process.versions.electron;\n}\nexport function hideBin(argv) {\n    return argv.slice(getProcessArgvBinIndex() + 1);\n}\nexport function getProcessArgvBin() {\n    return process.argv[getProcessArgvBinIndex()];\n}\n", "'use strict'\n\nimport { notStrictEqual, strictEqual } from 'assert'\nimport cliui from 'cliui'\nimport escalade from 'escalade/sync'\nimport { inspect } from 'util'\nimport { readFileSync } from 'fs'\nimport { fileURLToPath } from 'url';\nimport Parser from 'yargs-parser'\nimport { basename, dirname, extname, relative, resolve } from 'path'\nimport { getProcessArgvBin } from '../../build/lib/utils/process-argv.js'\nimport { YError } from '../../build/lib/yerror.js'\nimport y18n from 'y18n'\n\nconst REQUIRE_ERROR = 'require is not supported by ESM'\nconst REQUIRE_DIRECTORY_ERROR = 'loading a directory of commands is not supported yet for ESM'\n\nlet __dirname;\ntry {\n  __dirname = fileURLToPath(import.meta.url);\n} catch (e) {\n  __dirname = process.cwd();\n}\nconst mainFilename = __dirname.substring(0, __dirname.lastIndexOf('node_modules'));\n\nexport default {\n  assert: {\n    notStrictEqual,\n    strictEqual\n  },\n  cliui,\n  findUp: escalade,\n  getEnv: (key) => {\n    return process.env[key]\n  },\n  inspect,\n  getCallerFile: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  getProcessArgvBin,\n  mainFilename: mainFilename || process.cwd(),\n  Parser,\n  path: {\n    basename,\n    dirname,\n    extname,\n    relative,\n    resolve\n  },\n  process: {\n    argv: () => process.argv,\n    cwd: process.cwd,\n    emitWarning: (warning, type) => process.emitWarning(warning, type),\n    execPath: () => process.execPath,\n    exit: process.exit,\n    nextTick: process.nextTick,\n    stdColumns: typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  },\n  readFileSync,\n  require: () => {\n    throw new YError(REQUIRE_ERROR)\n  },\n  requireDirectory: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  stringWidth: (str) => {\n    return [...str].length\n  },\n  y18n: y18n({\n    directory: resolve(__dirname, '../../../locales'),\n    updateFiles: false\n  })\n}\n", "'use strict';\nconst align = {\n    right: alignRight,\n    center: alignCenter\n};\nconst top = 0;\nconst right = 1;\nconst bottom = 2;\nconst left = 3;\nexport class UI {\n    constructor(opts) {\n        var _a;\n        this.width = opts.width;\n        this.wrap = (_a = opts.wrap) !== null && _a !== void 0 ? _a : true;\n        this.rows = [];\n    }\n    span(...args) {\n        const cols = this.div(...args);\n        cols.span = true;\n    }\n    resetOutput() {\n        this.rows = [];\n    }\n    div(...args) {\n        if (args.length === 0) {\n            this.div('');\n        }\n        if (this.wrap && this.shouldApplyLayoutDSL(...args) && typeof args[0] === 'string') {\n            return this.applyLayoutDSL(args[0]);\n        }\n        const cols = args.map(arg => {\n            if (typeof arg === 'string') {\n                return this.colFromString(arg);\n            }\n            return arg;\n        });\n        this.rows.push(cols);\n        return cols;\n    }\n    shouldApplyLayoutDSL(...args) {\n        return args.length === 1 && typeof args[0] === 'string' &&\n            /[\\t\\n]/.test(args[0]);\n    }\n    applyLayoutDSL(str) {\n        const rows = str.split('\\n').map(row => row.split('\\t'));\n        let leftColumnWidth = 0;\n        // simple heuristic for layout, make sure the\n        // second column lines up along the left-hand.\n        // don't allow the first column to take up more\n        // than 50% of the screen.\n        rows.forEach(columns => {\n            if (columns.length > 1 && mixin.stringWidth(columns[0]) > leftColumnWidth) {\n                leftColumnWidth = Math.min(Math.floor(this.width * 0.5), mixin.stringWidth(columns[0]));\n            }\n        });\n        // generate a table:\n        //  replacing ' ' with padding calculations.\n        //  using the algorithmically generated width.\n        rows.forEach(columns => {\n            this.div(...columns.map((r, i) => {\n                return {\n                    text: r.trim(),\n                    padding: this.measurePadding(r),\n                    width: (i === 0 && columns.length > 1) ? leftColumnWidth : undefined\n                };\n            }));\n        });\n        return this.rows[this.rows.length - 1];\n    }\n    colFromString(text) {\n        return {\n            text,\n            padding: this.measurePadding(text)\n        };\n    }\n    measurePadding(str) {\n        // measure padding without ansi escape codes\n        const noAnsi = mixin.stripAnsi(str);\n        return [0, noAnsi.match(/\\s*$/)[0].length, 0, noAnsi.match(/^\\s*/)[0].length];\n    }\n    toString() {\n        const lines = [];\n        this.rows.forEach(row => {\n            this.rowToString(row, lines);\n        });\n        // don't display any lines with the\n        // hidden flag set.\n        return lines\n            .filter(line => !line.hidden)\n            .map(line => line.text)\n            .join('\\n');\n    }\n    rowToString(row, lines) {\n        this.rasterize(row).forEach((rrow, r) => {\n            let str = '';\n            rrow.forEach((col, c) => {\n                const { width } = row[c]; // the width with padding.\n                const wrapWidth = this.negatePadding(row[c]); // the width without padding.\n                let ts = col; // temporary string used during alignment/padding.\n                if (wrapWidth > mixin.stringWidth(col)) {\n                    ts += ' '.repeat(wrapWidth - mixin.stringWidth(col));\n                }\n                // align the string within its column.\n                if (row[c].align && row[c].align !== 'left' && this.wrap) {\n                    const fn = align[row[c].align];\n                    ts = fn(ts, wrapWidth);\n                    if (mixin.stringWidth(ts) < wrapWidth) {\n                        ts += ' '.repeat((width || 0) - mixin.stringWidth(ts) - 1);\n                    }\n                }\n                // apply border and padding to string.\n                const padding = row[c].padding || [0, 0, 0, 0];\n                if (padding[left]) {\n                    str += ' '.repeat(padding[left]);\n                }\n                str += addBorder(row[c], ts, '| ');\n                str += ts;\n                str += addBorder(row[c], ts, ' |');\n                if (padding[right]) {\n                    str += ' '.repeat(padding[right]);\n                }\n                // if prior row is span, try to render the\n                // current row on the prior line.\n                if (r === 0 && lines.length > 0) {\n                    str = this.renderInline(str, lines[lines.length - 1]);\n                }\n            });\n            // remove trailing whitespace.\n            lines.push({\n                text: str.replace(/ +$/, ''),\n                span: row.span\n            });\n        });\n        return lines;\n    }\n    // if the full 'source' can render in\n    // the target line, do so.\n    renderInline(source, previousLine) {\n        const match = source.match(/^ */);\n        const leadingWhitespace = match ? match[0].length : 0;\n        const target = previousLine.text;\n        const targetTextWidth = mixin.stringWidth(target.trimRight());\n        if (!previousLine.span) {\n            return source;\n        }\n        // if we're not applying wrapping logic,\n        // just always append to the span.\n        if (!this.wrap) {\n            previousLine.hidden = true;\n            return target + source;\n        }\n        if (leadingWhitespace < targetTextWidth) {\n            return source;\n        }\n        previousLine.hidden = true;\n        return target.trimRight() + ' '.repeat(leadingWhitespace - targetTextWidth) + source.trimLeft();\n    }\n    rasterize(row) {\n        const rrows = [];\n        const widths = this.columnWidths(row);\n        let wrapped;\n        // word wrap all columns, and create\n        // a data-structure that is easy to rasterize.\n        row.forEach((col, c) => {\n            // leave room for left and right padding.\n            col.width = widths[c];\n            if (this.wrap) {\n                wrapped = mixin.wrap(col.text, this.negatePadding(col), { hard: true }).split('\\n');\n            }\n            else {\n                wrapped = col.text.split('\\n');\n            }\n            if (col.border) {\n                wrapped.unshift('.' + '-'.repeat(this.negatePadding(col) + 2) + '.');\n                wrapped.push(\"'\" + '-'.repeat(this.negatePadding(col) + 2) + \"'\");\n            }\n            // add top and bottom padding.\n            if (col.padding) {\n                wrapped.unshift(...new Array(col.padding[top] || 0).fill(''));\n                wrapped.push(...new Array(col.padding[bottom] || 0).fill(''));\n            }\n            wrapped.forEach((str, r) => {\n                if (!rrows[r]) {\n                    rrows.push([]);\n                }\n                const rrow = rrows[r];\n                for (let i = 0; i < c; i++) {\n                    if (rrow[i] === undefined) {\n                        rrow.push('');\n                    }\n                }\n                rrow.push(str);\n            });\n        });\n        return rrows;\n    }\n    negatePadding(col) {\n        let wrapWidth = col.width || 0;\n        if (col.padding) {\n            wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);\n        }\n        if (col.border) {\n            wrapWidth -= 4;\n        }\n        return wrapWidth;\n    }\n    columnWidths(row) {\n        if (!this.wrap) {\n            return row.map(col => {\n                return col.width || mixin.stringWidth(col.text);\n            });\n        }\n        let unset = row.length;\n        let remainingWidth = this.width;\n        // column widths can be set in config.\n        const widths = row.map(col => {\n            if (col.width) {\n                unset--;\n                remainingWidth -= col.width;\n                return col.width;\n            }\n            return undefined;\n        });\n        // any unset widths should be calculated.\n        const unsetWidth = unset ? Math.floor(remainingWidth / unset) : 0;\n        return widths.map((w, i) => {\n            if (w === undefined) {\n                return Math.max(unsetWidth, _minWidth(row[i]));\n            }\n            return w;\n        });\n    }\n}\nfunction addBorder(col, ts, style) {\n    if (col.border) {\n        if (/[.']-+[.']/.test(ts)) {\n            return '';\n        }\n        if (ts.trim().length !== 0) {\n            return style;\n        }\n        return '  ';\n    }\n    return '';\n}\n// calculates the minimum width of\n// a column, based on padding preferences.\nfunction _minWidth(col) {\n    const padding = col.padding || [];\n    const minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);\n    if (col.border) {\n        return minWidth + 4;\n    }\n    return minWidth;\n}\nfunction getWindowWidth() {\n    /* istanbul ignore next: depends on terminal */\n    if (typeof process === 'object' && process.stdout && process.stdout.columns) {\n        return process.stdout.columns;\n    }\n    return 80;\n}\nfunction alignRight(str, width) {\n    str = str.trim();\n    const strWidth = mixin.stringWidth(str);\n    if (strWidth < width) {\n        return ' '.repeat(width - strWidth) + str;\n    }\n    return str;\n}\nfunction alignCenter(str, width) {\n    str = str.trim();\n    const strWidth = mixin.stringWidth(str);\n    /* istanbul ignore next */\n    if (strWidth >= width) {\n        return str;\n    }\n    return ' '.repeat((width - strWidth) >> 1) + str;\n}\nlet mixin;\nexport function cliui(opts, _mixin) {\n    mixin = _mixin;\n    return new UI({\n        width: (opts === null || opts === void 0 ? void 0 : opts.width) || getWindowWidth(),\n        wrap: opts === null || opts === void 0 ? void 0 : opts.wrap\n    });\n}\n", "// Minimal replacement for ansi string helpers \"wrap-ansi\" and \"strip-ansi\".\n// to facilitate ESM and Deno modules.\n// TODO: look at porting https://www.npmjs.com/package/wrap-ansi to ESM.\n// The npm application\n// Copyright (c) npm, Inc. and Contributors\n// Licensed on the terms of The Artistic License 2.0\n// See: https://github.com/npm/cli/blob/4c65cd952bc8627811735bea76b9b110cc4fc80e/lib/utils/ansi-trim.js\nconst ansi = new RegExp('\\x1b(?:\\\\[(?:\\\\d+[ABCDEFGJKSTm]|\\\\d+;\\\\d+[Hfm]|' +\n    '\\\\d+;\\\\d+;\\\\d+m|6n|s|u|\\\\?25[lh])|\\\\w)', 'g');\nexport function stripAnsi(str) {\n    return str.replace(ansi, '');\n}\nexport function wrap(str, width) {\n    const [start, end] = str.match(ansi) || ['', ''];\n    str = stripAnsi(str);\n    let wrapped = '';\n    for (let i = 0; i < str.length; i++) {\n        if (i !== 0 && (i % width) === 0) {\n            wrapped += '\\n';\n        }\n        wrapped += str.charAt(i);\n    }\n    if (start && end) {\n        wrapped = `${start}${wrapped}${end}`;\n    }\n    return wrapped;\n}\n", "// Bootstrap cliui with CommonJS dependencies:\nimport { cliui } from './build/lib/index.js'\nimport { wrap, stripAnsi } from './build/lib/string-utils.js'\n\nexport default function ui (opts) {\n  return cliui(opts, {\n    stringWidth: (str) => {\n      return [...str].length\n    },\n    stripAnsi,\n    wrap\n  })\n}\n", "import { dirname, resolve } from 'path';\nimport { readdirSync, statSync } from 'fs';\n\nexport default function (start, callback) {\n\tlet dir = resolve('.', start);\n\tlet tmp, stats = statSync(dir);\n\n\tif (!stats.isDirectory()) {\n\t\tdir = dirname(dir);\n\t}\n\n\twhile (true) {\n\t\ttmp = callback(dir, readdirSync(dir));\n\t\tif (tmp) return resolve(dir, tmp);\n\t\tdir = dirname(tmp = dir);\n\t\tif (tmp === dir) break;\n\t}\n}\n", "export class YError extends Error {\n    constructor(msg) {\n        super(msg || 'yargs error');\n        this.name = 'YError';\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, YError);\n        }\n    }\n}\n", "import { readFileSync, statSync, writeFile } from 'fs';\nimport { format } from 'util';\nimport { resolve } from 'path';\nexport default {\n    fs: {\n        readFileSync,\n        writeFile\n    },\n    format,\n    resolve,\n    exists: (file) => {\n        try {\n            return statSync(file).isFile();\n        }\n        catch (err) {\n            return false;\n        }\n    }\n};\n", "let shim;\nclass Y18N {\n    constructor(opts) {\n        // configurable options.\n        opts = opts || {};\n        this.directory = opts.directory || './locales';\n        this.updateFiles = typeof opts.updateFiles === 'boolean' ? opts.updateFiles : true;\n        this.locale = opts.locale || 'en';\n        this.fallbackToLanguage = typeof opts.fallbackToLanguage === 'boolean' ? opts.fallbackToLanguage : true;\n        // internal stuff.\n        this.cache = Object.create(null);\n        this.writeQueue = [];\n    }\n    __(...args) {\n        if (typeof arguments[0] !== 'string') {\n            return this._taggedLiteral(arguments[0], ...arguments);\n        }\n        const str = args.shift();\n        let cb = function () { }; // start with noop.\n        if (typeof args[args.length - 1] === 'function')\n            cb = args.pop();\n        cb = cb || function () { }; // noop.\n        if (!this.cache[this.locale])\n            this._readLocaleFile();\n        // we've observed a new string, update the language file.\n        if (!this.cache[this.locale][str] && this.updateFiles) {\n            this.cache[this.locale][str] = str;\n            // include the current directory and locale,\n            // since these values could change before the\n            // write is performed.\n            this._enqueueWrite({\n                directory: this.directory,\n                locale: this.locale,\n                cb\n            });\n        }\n        else {\n            cb();\n        }\n        return shim.format.apply(shim.format, [this.cache[this.locale][str] || str].concat(args));\n    }\n    __n() {\n        const args = Array.prototype.slice.call(arguments);\n        const singular = args.shift();\n        const plural = args.shift();\n        const quantity = args.shift();\n        let cb = function () { }; // start with noop.\n        if (typeof args[args.length - 1] === 'function')\n            cb = args.pop();\n        if (!this.cache[this.locale])\n            this._readLocaleFile();\n        let str = quantity === 1 ? singular : plural;\n        if (this.cache[this.locale][singular]) {\n            const entry = this.cache[this.locale][singular];\n            str = entry[quantity === 1 ? 'one' : 'other'];\n        }\n        // we've observed a new string, update the language file.\n        if (!this.cache[this.locale][singular] && this.updateFiles) {\n            this.cache[this.locale][singular] = {\n                one: singular,\n                other: plural\n            };\n            // include the current directory and locale,\n            // since these values could change before the\n            // write is performed.\n            this._enqueueWrite({\n                directory: this.directory,\n                locale: this.locale,\n                cb\n            });\n        }\n        else {\n            cb();\n        }\n        // if a %d placeholder is provided, add quantity\n        // to the arguments expanded by util.format.\n        const values = [str];\n        if (~str.indexOf('%d'))\n            values.push(quantity);\n        return shim.format.apply(shim.format, values.concat(args));\n    }\n    setLocale(locale) {\n        this.locale = locale;\n    }\n    getLocale() {\n        return this.locale;\n    }\n    updateLocale(obj) {\n        if (!this.cache[this.locale])\n            this._readLocaleFile();\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                this.cache[this.locale][key] = obj[key];\n            }\n        }\n    }\n    _taggedLiteral(parts, ...args) {\n        let str = '';\n        parts.forEach(function (part, i) {\n            const arg = args[i + 1];\n            str += part;\n            if (typeof arg !== 'undefined') {\n                str += '%s';\n            }\n        });\n        return this.__.apply(this, [str].concat([].slice.call(args, 1)));\n    }\n    _enqueueWrite(work) {\n        this.writeQueue.push(work);\n        if (this.writeQueue.length === 1)\n            this._processWriteQueue();\n    }\n    _processWriteQueue() {\n        const _this = this;\n        const work = this.writeQueue[0];\n        // destructure the enqueued work.\n        const directory = work.directory;\n        const locale = work.locale;\n        const cb = work.cb;\n        const languageFile = this._resolveLocaleFile(directory, locale);\n        const serializedLocale = JSON.stringify(this.cache[locale], null, 2);\n        shim.fs.writeFile(languageFile, serializedLocale, 'utf-8', function (err) {\n            _this.writeQueue.shift();\n            if (_this.writeQueue.length > 0)\n                _this._processWriteQueue();\n            cb(err);\n        });\n    }\n    _readLocaleFile() {\n        let localeLookup = {};\n        const languageFile = this._resolveLocaleFile(this.directory, this.locale);\n        try {\n            // When using a bundler such as webpack, readFileSync may not be defined:\n            if (shim.fs.readFileSync) {\n                localeLookup = JSON.parse(shim.fs.readFileSync(languageFile, 'utf-8'));\n            }\n        }\n        catch (err) {\n            if (err instanceof SyntaxError) {\n                err.message = 'syntax error in ' + languageFile;\n            }\n            if (err.code === 'ENOENT')\n                localeLookup = {};\n            else\n                throw err;\n        }\n        this.cache[this.locale] = localeLookup;\n    }\n    _resolveLocaleFile(directory, locale) {\n        let file = shim.resolve(directory, './', locale + '.json');\n        if (this.fallbackToLanguage && !this._fileExistsSync(file) && ~locale.lastIndexOf('_')) {\n            // attempt fallback to language only\n            const languageFile = shim.resolve(directory, './', locale.split('_')[0] + '.json');\n            if (this._fileExistsSync(languageFile))\n                file = languageFile;\n        }\n        return file;\n    }\n    _fileExistsSync(file) {\n        return shim.exists(file);\n    }\n}\nexport function y18n(opts, _shim) {\n    shim = _shim;\n    const y18n = new Y18N(opts);\n    return {\n        __: y18n.__.bind(y18n),\n        __n: y18n.__n.bind(y18n),\n        setLocale: y18n.setLocale.bind(y18n),\n        getLocale: y18n.getLocale.bind(y18n),\n        updateLocale: y18n.updateLocale.bind(y18n),\n        locale: y18n.locale\n    };\n}\n", "import shim from './build/lib/platform-shims/node.js'\nimport { y18n as _y18n } from './build/lib/index.js'\n\nconst y18n = (opts) => {\n  return _y18n(opts, shim)\n}\n\nexport default y18n\n", "import { YError } from '../yerror.js';\nlet previouslyVisitedConfigs = [];\nlet shim;\nexport function applyExtends(config, cwd, mergeExtends, _shim) {\n    shim = _shim;\n    let defaultConfig = {};\n    if (Object.prototype.hasOwnProperty.call(config, 'extends')) {\n        if (typeof config.extends !== 'string')\n            return defaultConfig;\n        const isPath = /\\.json|\\..*rc$/.test(config.extends);\n        let pathToDefault = null;\n        if (!isPath) {\n            try {\n                pathToDefault = require.resolve(config.extends);\n            }\n            catch (_err) {\n                return config;\n            }\n        }\n        else {\n            pathToDefault = getPathToDefaultConfig(cwd, config.extends);\n        }\n        checkForCircularExtends(pathToDefault);\n        previouslyVisitedConfigs.push(pathToDefault);\n        defaultConfig = isPath\n            ? JSON.parse(shim.readFileSync(pathToDefault, 'utf8'))\n            : require(config.extends);\n        delete config.extends;\n        defaultConfig = applyExtends(defaultConfig, shim.path.dirname(pathToDefault), mergeExtends, shim);\n    }\n    previouslyVisitedConfigs = [];\n    return mergeExtends\n        ? mergeDeep(defaultConfig, config)\n        : Object.assign({}, defaultConfig, config);\n}\nfunction checkForCircularExtends(cfgPath) {\n    if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {\n        throw new YError(`Circular extended configurations: '${cfgPath}'.`);\n    }\n}\nfunction getPathToDefaultConfig(cwd, pathToExtend) {\n    return shim.path.resolve(cwd, pathToExtend);\n}\nfunction mergeDeep(config1, config2) {\n    const target = {};\n    function isObject(obj) {\n        return obj && typeof obj === 'object' && !Array.isArray(obj);\n    }\n    Object.assign(target, config1);\n    for (const key of Object.keys(config2)) {\n        if (isObject(config2[key]) && isObject(target[key])) {\n            target[key] = mergeDeep(config1[key], config2[key]);\n        }\n        else {\n            target[key] = config2[key];\n        }\n    }\n    return target;\n}\n"],
  "mappings": "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",
  "names": ["DefaultValuesForTypeKey", "key", "args", "value", "val", "argv", "env", "aliases", "defaults", "_a", "mixin", "import_path", "import_fs", "import_util", "import_fs", "import_path", "import_fs", "import_util", "import_path", "y18n", "y18n", "shim"]
}
