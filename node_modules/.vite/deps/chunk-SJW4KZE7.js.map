{
  "version": 3,
  "sources": ["../../puppeteer-core/src/common/BrowserWebSocketTransport.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport type {ConnectionTransport} from './ConnectionTransport.js';\n\n/**\n * @internal\n */\nexport class BrowserWebSocketTransport implements ConnectionTransport {\n  static create(url: string): Promise<BrowserWebSocketTransport> {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(url);\n\n      ws.addEventListener('open', () => {\n        return resolve(new BrowserWebSocketTransport(ws));\n      });\n      ws.addEventListener('error', reject);\n    });\n  }\n\n  #ws: WebSocket;\n  onmessage?: (message: string) => void;\n  onclose?: () => void;\n\n  constructor(ws: WebSocket) {\n    this.#ws = ws;\n    this.#ws.addEventListener('message', event => {\n      if (this.onmessage) {\n        this.onmessage.call(null, event.data);\n      }\n    });\n    this.#ws.addEventListener('close', () => {\n      if (this.onclose) {\n        this.onclose.call(null);\n      }\n    });\n    // Silently ignore all errors - we don't know what to do with them.\n    this.#ws.addEventListener('error', () => {});\n  }\n\n  send(message: string): void {\n    this.#ws.send(message);\n  }\n\n  close(): void {\n    this.#ws.close();\n  }\n}\n"],
  "mappings": ";AAUM,IAAO,4BAAP,MAAO,2BAAyB;EACpC,OAAO,OAAO,KAAW;AACvB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACrC,YAAM,KAAK,IAAI,UAAU,GAAG;AAE5B,SAAG,iBAAiB,QAAQ,MAAK;AAC/B,eAAO,QAAQ,IAAI,2BAA0B,EAAE,CAAC;MAClD,CAAC;AACD,SAAG,iBAAiB,SAAS,MAAM;IACrC,CAAC;EACH;EAEA;EACA;EACA;EAEA,YAAY,IAAa;AACvB,SAAK,MAAM;AACX,SAAK,IAAI,iBAAiB,WAAW,WAAQ;AAC3C,UAAI,KAAK,WAAW;AAClB,aAAK,UAAU,KAAK,MAAM,MAAM,IAAI;MACtC;IACF,CAAC;AACD,SAAK,IAAI,iBAAiB,SAAS,MAAK;AACtC,UAAI,KAAK,SAAS;AAChB,aAAK,QAAQ,KAAK,IAAI;MACxB;IACF,CAAC;AAED,SAAK,IAAI,iBAAiB,SAAS,MAAK;IAAE,CAAC;EAC7C;EAEA,KAAK,SAAe;AAClB,SAAK,IAAI,KAAK,OAAO;EACvB;EAEA,QAAK;AACH,SAAK,IAAI,MAAK;EAChB;;",
  "names": []
}
